node {

    // Clean Workspace
    cleanWs()

    // Clean previously built images
    try {
        sh 'docker image rm g28form:latest -f'
    } catch (e) {
        echo 'Error removing previously generated image.  Not a big deal.'
    }

    try {
        sh 'docker image rm ${MASTER_IMAGE_NAME} -f'
    } catch (e) {
        echo 'Error removing previously tagged image.  Not a big deal.'
    }

    stage('Checkout Code') {
        checkout([
            $class: 'GitSCM', 
            branches: [[name: '*/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [], 
            submoduleCfg: [], 
            userRemoteConfigs: [[url: 'https://github.com/DevTechnology/DHSFormG28.git']]])
    }

    // Perform the build in an appropriate docker container so we don't have to install
    // project specific artifacts on the Jenkins server itself.
    try {

        stage('Build API Docker Image') {
            # Build the UI Docker Image
            sh 'docker build -t g28form-api:latest -f ./docker/container/Dockerfile .'
        }

        stage('Deploy to ECS') {
            
            echo 'Deploying DHSFormG28 Docker Image to ECS...'

            sh '''
                # Get the ECS Registry login string
                DOCKER_LOGIN=`aws ecr get-login --no-include-email --region us-east-1`

                # Execute ECS Registry login command
                ${DOCKER_LOGIN}

                # Tag Image
                tag=${MASTER_IMAGE_NAME}:v_${BUILD_NUMBER}

                # Push docker image to ECS Registry
                docker tag g28form-api:latest ${tag}

                # Push docker image to ECS Registry
                docker push ${tag}

                # orig="##TAG##"
                # cd /var/lib/jenkins/workspace/DHSFormG28-API/API/docker/deploy
                # sed "s~$orig~$tag~g" "docker-compose-template.yml" > "docker-compose.yml"

                # Refresh cluster with new image in registry
                # /usr/local/bin/ecs-cli compose --project-name ${TASK_DEFINITION_NAME} up --launch-type FARGATE -c ${CLUSTER_NAME}

                # VERSION=`aws ecs describe-task-definition --task-definition ${TASK_DEFINITION_NAME} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//'`
                
                # TODO: use JP to parse JSON to get this value instead of egrep
                #DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER_NAME} | egrep "desiredCount" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
                #DESIRED_COUNT=1
                #if [ ${DESIRED_COUNT} = "0" ]; then
                #    DESIRED_COUNT="1"
                #fi

                #aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} \
                #    --task-definition ${TASK_DEFINITION_NAME}:${VERSION} --desired-count ${DESIRED_COUNT}
            '''

        }
    } finally {
        sh 'docker container stop dhsg28-ui-build'
        sh 'docker container rm dhsg28-ui-build'
    }
}